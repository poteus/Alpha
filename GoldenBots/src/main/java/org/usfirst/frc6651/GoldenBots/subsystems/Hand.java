// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6651.GoldenBots.subsystems;


import org.usfirst.frc6651.GoldenBots.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Hand extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private DoubleSolenoid rightHand;
    private DoubleSolenoid leftHand;
    private DigitalInput switchRight;
    private DigitalInput switchLeft;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Hand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        rightHand = new DoubleSolenoid(0, 0, 1);
        addChild("RightHand",rightHand);
        
        
        leftHand = new DoubleSolenoid(0, 2, 3);
        addChild("LeftHand",leftHand);
        
        
        switchRight = new DigitalInput(0);
        addChild("SwitchRight",switchRight);
        
        
        switchLeft = new DigitalInput(1);
        addChild("SwitchLeft",switchLeft);
        
        DoubleSolenoid.Value CLOSE=DoubleSolenoid.Value.kForward, OPEN=DoubleSolenoid.Value.kReverse;
	    DoubleSolenoid.Value butterflyState = OPEN;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    void open() {
        // the task to be performed

        // It should open the hands by using lefthand and righthand
        rightHand.set(OPEN);
        leftHand.set(OPEN);
    }

    void close(){
            // the task to be performed

        // It should open the hands by using lefthand and righthand
        rightHand.set(CLOSE);
        leftHand.set(CLOSE);
    }

    boolean isobject() {
        return switchLeft.get() && switchRight.get();
    }
}

